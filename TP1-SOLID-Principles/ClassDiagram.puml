@startuml
interface Factories.BookFactory {
~ Book create()
~ Collection<Book> create(int)
}

class Models.BookBase {
- {static} String ILLEGAL_ARGUMENT_TEMPLATE_MSG
- {static} String TO_STRING_TEMPLATE
- String isbn
- String title
- String author
- int yearPublished
- boolean isAvailable
+ String getIsbn()
+ void setIsbn(String)
+ String getTitle()
+ void setTitle(String)
+ String getAuthor()
+ void setAuthor(String)
+ int getYearPublished()
+ void setYearPublished(int)
+ boolean isAvailable()
+ void setIsAvailable(boolean)
+ String toString()
- void assertFieldIsValid(T,Validator<T>,String)
}


class Validators.IntBiggerThanOrEqualToCeroValidator {
+ boolean check(Integer)
}

class Exceptions.BookAlreadyLendedException {
}
class Repositories.ArrayListBookRepository {
- ArrayList<Book> books
+ void add(Book)
+ Optional<Book> get(String)
+ Collection<Book> getAll()
+ void delete(String)
}


interface Validators.Validator {
~ boolean check(T)
}

interface Library {
~ void addBook(Book)
~ void deleteBook(String)
~ void lendBook(String)
~ void returnBook(String)
~ Optional<Book> findBookWithIsbn(String)
~ Collection<Book> getBooksFromAuthor(String)
~ Collection<Book> getBooksByAvailability(boolean)
~ Collection<Book> getBooksPublishedAtYear(int)
}

interface Printers.ReportPrinter {
~ void println(String)
~ void println(Book[])
~ void printErr(LibraryException)
~ void printlnf(String,Object)
}

class Factories.FixedDataSizeBookFactory {
- int dataSize
- Random random
- String[] authors
- String[] titles
- int[] publicationYears
+ Book create()
+ Collection<Book> create(int)
- Book createBookWithDataAtIndex(int)
}


class Filters.PublicationYearFilter {
- int year
+ boolean check(Book)
}


class Exceptions.BookNotFoundException {
}
class DemoLibrary {
- BookRepository bookRepo
- BookFinder bookFinder
- LoanManager loanManager
+ void addBook(Book)
+ void deleteBook(String)
+ void lendBook(String)
+ void returnBook(String)
+ Optional<Book> findBookWithIsbn(String)
+ Collection<Book> getBooksFromAuthor(String)
+ Collection<Book> getBooksByAvailability(boolean)
+ Collection<Book> getBooksPublishedAtYear(int)
}


class Validators.StringNotNullNorEmptyValidator {
+ boolean check(String)
}

class Exceptions.DuplicatedBookException {
}
class Printers.LibraryReportPrinter {
+ void println(String)
+ void println(Book[])
+ void printErr(LibraryException)
+ void printlnf(String,Object)
}

class Services.Finders.SimpleBookFinder {
- BookRepository bookRepo
+ Optional<Book> findBookWithIsbn(String)
+ Collection<Book> filterBooks(BookFilter)
}


class Repositories.ArrayBookRepository {
- Book[] books
- int booksVirtualLength
- int firstEmptyPosition
+ void add(Book)
+ Optional<Book> get(String)
+ Collection<Book> getAll()
+ void delete(String)
- int indexOf(String)
}


class Main {
+ {static} void main(String[])
- {static} Library createDemoLibrary(BookRepository)
- {static} void runLibraryDemo(Library,BookFactory,ReportPrinter,String)
- {static} void trySetField(Book,Function<Book,Consumer<T>>,T,ReportPrinter)
}

class Exceptions.InvalidBookFieldException {
}
class Filters.AvailabilityFilter {
- boolean shouldBeAvailable
+ boolean check(Book)
}


class Exceptions.InvalidIsbnException {
}
interface Services.Finders.BookFinder {
~ Optional<Book> findBookWithIsbn(String)
~ Collection<Book> filterBooks(BookFilter)
}

interface Repositories.BookRepository {
~ void add(Book)
~ Optional<Book> get(String)
~ Collection<Book> getAll()
~ void delete(String)
}

interface Services.LoanManagers.LoanManager {
~ void lendBook(String)
~ void returnBook(String)
}

class Filters.AuthorFilter {
- String author
+ boolean check(Book)
}


class Validators.IsbnValidator {
+ boolean check(String)
- boolean isValidUuid(String)
}

interface Models.Book {
~ String getIsbn()
~ void setIsbn(String)
~ String getTitle()
~ void setTitle(String)
~ String getAuthor()
~ void setAuthor(String)
~ int getYearPublished()
~ void setYearPublished(int)
~ boolean isAvailable()
~ void setIsAvailable(boolean)
}

interface Filters.BookFilter {
~ boolean check(Book)
}

class Services.LoanManagers.SimpleLoanManager {
- {static} String BOOK_NOT_FOUND_TEMPLATE_MSG
- {static} String ALREADY_LENDED_TEMPLATE_MSG
- BookRepository bookRepo
+ void lendBook(String)
+ void returnBook(String)
}


class Exceptions.LibraryException {
}


Models.Book <|.. Models.BookBase
Validators.Validator <|.. Validators.IntBiggerThanOrEqualToCeroValidator
Exceptions.LibraryException <|-- Exceptions.BookAlreadyLendedException
Repositories.BookRepository <|.. Repositories.ArrayListBookRepository
Factories.BookFactory <|.. Factories.FixedDataSizeBookFactory
Filters.BookFilter <|.. Filters.PublicationYearFilter
Exceptions.LibraryException <|-- Exceptions.BookNotFoundException
Library <|.. DemoLibrary
Validators.Validator <|.. Validators.StringNotNullNorEmptyValidator
Exceptions.LibraryException <|-- Exceptions.DuplicatedBookException
Printers.ReportPrinter <|.. Printers.LibraryReportPrinter
Services.Finders.BookFinder <|.. Services.Finders.SimpleBookFinder
Repositories.BookRepository <|.. Repositories.ArrayBookRepository
Exceptions.LibraryException <|-- Exceptions.InvalidBookFieldException
Filters.BookFilter <|.. Filters.AvailabilityFilter
Exceptions.LibraryException <|-- Exceptions.InvalidIsbnException
Filters.BookFilter <|.. Filters.AuthorFilter
Validators.StringNotNullNorEmptyValidator <|-- Validators.IsbnValidator
Services.LoanManagers.LoanManager <|.. Services.LoanManagers.SimpleLoanManager
Exceptions.RuntimeException <|-- Exceptions.LibraryException
@enduml