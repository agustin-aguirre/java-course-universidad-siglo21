@startuml
class Models.Book {
# {static} String ILLEGAL_ARGUMENT_TEMPLATE_MSG
# {static} String TO_STRING_TEMPLATE
- String isbn
- String title
- String author
- int yearPublished
- boolean isAvailable
+ String getIsbn()
+ void setIsbn(String)
+ String getTitle()
+ void setTitle(String)
+ String getAuthor()
+ void setAuthor(String)
+ int getYearPublished()
+ void setYearPublished(int)
+ boolean isAvailable()
+ void setIsAvailable(boolean)
+ String toString()
# void assertStringFieldIsValid(String,String)
# void assertFieldIsValid(T,Predicate<T>,String)
# String getFieldsString()
}


class Services.Finders.SimpleBookFinder {
- BookRepository bookRepo
+ Optional<Book> findBookWithIsbn(String)
+ Collection<Book> filterBooks(BookFilter)
}


interface Printers.ReportPrinter {
~ void println(String)
~ void println(Book[])
~ void println(Collection<Book>)
~ void printErr(LibraryException)
~ void printlnf(String,Object)
}

class Repositories.ArrayBookRepository {
- Book[] books
- int booksVirtualLength
- int firstEmptyPosition
+ void add(Book)
+ Optional<Book> get(String)
+ Collection<Book> getAll()
+ void delete(String)
- int indexOf(String)
}


interface Services.Finders.BookFinder {
~ Optional<Book> findBookWithIsbn(String)
~ Collection<Book> filterBooks(BookFilter)
}

class Main {
+ {static} void main(String[])
}

class Exceptions.InvalidBookFieldException {
}
class Filters.PublicationYearFilter {
- int year
+ boolean check(Book)
}


class Services.LoanManagers.SimpleLoanManager {
- {static} String BOOK_NOT_FOUND_TEMPLATE_MSG
- {static} String ALREADY_LENDED_TEMPLATE_MSG
- BookRepository bookRepo
+ void lendBook(String)
+ void returnBook(String)
}


class Exceptions.BookNotFoundException {
}
class Models.EBook {
- {static} String[] SUPPORTED_FORMATS
- String format
+ String getFormat()
+ void setFormat(String)
# String getFieldsString()
}


class Printers.LibraryReportPrinter {
+ void println(String)
+ void println(Book[])
+ void println(Collection<Book>)
+ void printErr(LibraryException)
+ void printlnf(String,Object)
}

interface Filters.BookFilter {
~ boolean check(Book)
}

class Exceptions.DuplicatedBookException {
}
class Filters.AuthorFilter {
- String author
+ boolean check(Book)
}


class Exceptions.InvalidIsbnException {
}
interface Repositories.BookRepository {
~ void add(Book)
~ Optional<Book> get(String)
~ Collection<Book> getAll()
~ void delete(String)
}

interface Services.LoanManagers.LoanManager {
~ void lendBook(String)
~ void returnBook(String)
}

class Exceptions.LibraryException {
}
class Exceptions.BookAlreadyLendedException {
}
class Filters.AvailabilityFilter {
- boolean shouldBeAvailable
+ boolean check(Book)
}


class Repositories.ArrayListBookRepository {
- ArrayList<Book> books
+ void add(Book)
+ Optional<Book> get(String)
+ Collection<Book> getAll()
+ void delete(String)
}




Services.Finders.BookFinder <|.. Services.Finders.SimpleBookFinder
Repositories.BookRepository <|.. Repositories.ArrayBookRepository
Exceptions.LibraryException <|-- Exceptions.InvalidBookFieldException
Filters.BookFilter <|.. Filters.PublicationYearFilter
Services.LoanManagers.LoanManager <|.. Services.LoanManagers.SimpleLoanManager
Exceptions.LibraryException <|-- Exceptions.BookNotFoundException
Models.Book <|-- Models.EBook
Printers.ReportPrinter <|.. Printers.LibraryReportPrinter
Exceptions.LibraryException <|-- Exceptions.DuplicatedBookException
Filters.BookFilter <|.. Filters.AuthorFilter
Exceptions.LibraryException <|-- Exceptions.InvalidIsbnException
Exceptions.RuntimeException <|-- Exceptions.LibraryException
Exceptions.LibraryException <|-- Exceptions.BookAlreadyLendedException
Filters.BookFilter <|.. Filters.AvailabilityFilter
Repositories.BookRepository <|.. Repositories.ArrayListBookRepository
@enduml